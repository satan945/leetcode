/*
 * Copyright (c) 2017 Liqiang Fang. All Rights Reserved.
 */
package org.ccs.leetcode.string.easy;

import java.util.Arrays;

/**
 * @author Abel created on 2017/7/7 11:53
 * @version $Id$
 */
public class Solution {
    /**
     * 344 Reverse String
     * <p>
     * https://leetcode.com/problems/reverse-string
     *
     * @param s
     * @return
     */
    public String reverseString(String s) {
        int length = s.length();
        char[] a = s.toCharArray();
        char[] b = new char[length];
        int j = 0;
        for (int i = length - 1; i >= 0; i--) {
            b[j] = a[i];
            j++;
        }
        return new String(b);
    }

    /**
     * 389 Find the Difference
     * <p>
     * https://leetcode.com/problems/find-the-difference
     * <p>
     * Given two strings s and t which consist of only lowercase letters.
     * 
     * String t is generated by random shuffling string s and then add one more letter at a random position.
     * 
     * Find the letter that was added in t.
     * 
     * Example:
     * 
     * Input: s = "abcd" t = "abcde"
     * 
     * Output: e
     * 
     * Explanation: 'e' is the letter that was added.
     * </p>
     * 
     * @param s
     * @param t
     * @return
     */
    public char findTheDifference(String s, String t) {
        char[] sChars = s.toCharArray();
        char[] tChars = t.toCharArray();
        Arrays.sort(tChars);
        Arrays.sort(sChars);
        for (int i = 0; i < tChars.length; i++) {
            if (i == sChars.length) {
                return tChars[i];
            }
            if (tChars[i] != sChars[i]) {
                return tChars[i];
            }
        }
        return ' ';
    }

    public char findTheDifference2(String s, String t) {
        // Initialize variables to store sum of ASCII codes for
        // each string
        int charCodeS = 0, charCodeT = 0;
        // Iterate through both strings and char codes
        for (int i = 0; i < s.length(); ++i)
            charCodeS += (int) s.charAt(i);
        for (int i = 0; i < t.length(); ++i)
            charCodeT += (int) t.charAt(i);
        // Return the difference between 2 strings as char
        return (char) (charCodeT - charCodeS);
    }

    /**
     * 58. Length of Last Word
     * <p>
     * https://leetcode.com/problems/length-of-last-word
     * <p>
     * Given a string s consists of upper/lower-case alphabets and empty space characters ' ', return the length of last
     * word in the string.
     * 
     * If the last word does not exist, return 0.
     * 
     * Note: A word is defined as a character sequence consists of non-space characters only.
     * 
     * For example, Given s = "Hello World", return 5.
     * </p>
     *
     * @param s
     * @return
     */
    public int lengthOfLastWord(String s) {
        s = s.trim();
        if (s == null || s.length() == 0) {
            return 0;
        }
        String[] strings = s.split(" ");
        return strings[strings.length - 1].length();
    }

    public static void main(String[] args) {
        String a = "123456  123123";
        Solution solution = new Solution();
        System.out.println(solution.reverseString(a));
        System.out.println(solution.lengthOfLastWord(a));
    }
}
